/**
 * Wordle Finder - A site to add generic wordlists for Wordle-like games
 * and find solutions for a given date.
 * Copyright (C) 2022  Adam Thompson-Sharpe
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
import { decompress } from '../lists'

const WORDLIST = decompress(
  '',
) as unknown as [string, string][]

const UNLIMITED_WORDLIST = decompress(
  'N4IgjGBMAMIFwG0QFMCGA3ZBnEAaEARgJYA2JAniALr5gDMALLIiAOZGYB2eIAxqgBdeAC2q0ArOOZIAJkXYCenZAA8ArjhogY4sPFlEAthR5pWyAE5jt0AGx6WqYjOQ8swtZ0VbITB0iwiZHMeVBIAB2FUa0hdfxAAMyJOER4SVAt0aJ8AdgZ41ENwk3wiOQB7b3xIAA57fRAAd3KLAVF8YtReVy06X0gGgCtyskp8LABHNUFrOikBlmEiIXaQGXLOFtnxBgWA5I0eC2QEy2s/OgbDcsNDMbYLVCxw84hLlkMDnHwSZEwSc6QWzvAKGMIAjrIAQCShaBh0egNCxqX5WfCNZKpOGMEEgdCVM7jUgAa1h+HhAE5cTDkqw3JY1IZzrtcWENq5xgIiLxiecKYiWGhMN9EsjltZJDUGA0sNdSTwCMdUDIJTkwNKWAR0gAvDkgAQWbm8rTiOoapCGRl3HjCZBkcoSmp5GXCFqKfCodi/ay2HbiBpTAlucIZY34WwUhj+li8cqx6L4JKWMkgHLQOwNVThO08LmsYRVVOQOi2GVyvWe2nWHIU2ylxbLVL4AgokJaKk1GoNdAcMqhQwEM7t2zQLuOEjlBLuthqbCafC1hhjpDhIjZtEgSbTQsUuoUhpJEhtUwuMHUAC+QA==',
) as unknown as Record<number, [string, string]>

const RANDOM_WORDS = decompress(
  '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',
)

/**
 * Get a generator to index the unlimited wordbank
 * @param startingSeed The initial seed (plus any relevant modifier)
 * @returns A generator function that returns a random number
 */
function getGenerator(startingSeed: number) {
  let seed = Number(startingSeed)

  return function generator() {
    let newSeed = (seed += 1831565813)
    newSeed = Math.imul(newSeed ^ (newSeed >>> 15), 1 | newSeed)

    return (
      (((newSeed ^=
        newSeed + Math.imul(newSeed ^ (newSeed >>> 7), 61 | newSeed)) ^
        (newSeed >>> 14)) >>>
        0) /
      4294967296
    )
  }
}

/** Get a word for unlimited mode */
function getUnlimitedWord(rand: () => number) {
  return RANDOM_WORDS[Math.floor(RANDOM_WORDS.length * rand())]
}

/**
 * Checks whether two words are overlapping
 * @param word1 The first potential word
 * @param word2 The second potential word
 * @returns Whether the first two words share any characters
 */
function overlapping(word1: string, word2: string) {
  if (word1 === word2) return true
  if (word1.includes('*') || word2.includes('*')) return true
  for (let i = 0; i < word1.length; i++) {
    if (word1[i] === word2[i]) return true
    if (word1.includes(word2[i])) return true
  }
  return false
}

export default function xordle(seed: number): [string, string] {
  if (seed in WORDLIST) return WORDLIST[seed]
  if (seed in UNLIMITED_WORDLIST) return UNLIMITED_WORDLIST[seed]

  const generator = getGenerator(seed + 100_000)

  let words: [string, string]

  do {
    words = [getUnlimitedWord(generator), getUnlimitedWord(generator)]
  } while (overlapping(...words))

  return words
}
